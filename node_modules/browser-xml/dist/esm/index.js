import { groupBy } from "./utils";
const getTagAndProps = (xml) => {
    const tag = xml.slice(1).match(/\w+/)[0];
    const props = Array.from(xml.match(/\w+="[^"]+"/g) || []);
    return {
        tag,
        props: props.reduce((acc, prop) => {
            const [key, val] = prop.slice(0, -1).split('="');
            let value = val;
            if (/^-?\d+(?:\.\d+)?$/.test(val)) {
                value = Number(val);
            }
            return {
                ...acc,
                [key]: value,
            };
        }, {}),
    };
};
const toJSON = (lines) => {
    if (!lines[0].startsWith("<")) {
        return { _v: lines[0] };
    }
    else {
        const tagList = [];
        let openIdx = 0;
        while (openIdx < lines.length) {
            const { tag, props } = getTagAndProps(lines[openIdx]);
            const closeIdx = lines[openIdx].endsWith("/>")
                ? openIdx
                : openIdx +
                    lines.slice(openIdx).findIndex((line) => line.startsWith(`</${tag}`));
            tagList.push({
                tag,
                props,
                openIdx,
                closeIdx,
            });
            openIdx = closeIdx + 1;
        }
        const json = {};
        const groups = groupBy(tagList, "tag");
        for (const [key, arr] of Object.entries(groups)) {
            let items = [];
            for (const v of arr) {
                const { props, openIdx, closeIdx } = v;
                const subXml = lines.slice(openIdx + 1, closeIdx);
                let res;
                if (subXml.length > 0) {
                    if (Object.keys(props).length === 0) {
                        res = toJSON(subXml);
                    }
                    else {
                        res = {
                            $: props,
                            ...toJSON(subXml),
                        };
                    }
                }
                else {
                    res = props;
                }
                items.push(res);
            }
            if (items.length === 1) {
                items = items[0];
            }
            if (Object.keys(items).length === 1 && ('_v' in items && items._v !== undefined)) {
                json[key] = items._v;
            }
            else {
                json[key] = items;
            }
        }
        return json;
    }
};
export function parse(xml) {
    xml = xml.replace(/<\?xml[^>]+>/g, "");
    const formattedXml = xml
        .split(/(?<=>)|(?=<\/)/)
        .map((v) => v.trim())
        .filter((v) => v);
    return toJSON(formattedXml);
}
